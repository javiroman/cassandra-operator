apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
  - port: 9042
  selector:
    app: cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 3
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
      - name: cassandra
        image: kubernetesbigdataeg/cassandra:3.9-1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
              # container processes are run inside of a user namespace 
              # (among other namespaces). Namespaces are a key linux isolation 
              # mechanism, and most of how containers can act like light weight 
              # VMs. Where the container process sees itself as root, from the 
              # outside, the container is actually a different user in the host's
              # user namespace. This means it is less powerful than root on the 
              # host. This is good, as we want containers to act as isolated hosts. 
              # It would be like a VM breaking out of virtual space and mucking a
              # round on the host. Along with namespaces, the container processes 
              # are also confined by linux capabilities. Processes are typically 
              # given a subset of capabilities because they don't need them. However, 
              # some binaries try to do things that require capabilities, and the 
              # mechanism to report an "I'm not allowed to do that" error is noto
              # riously poor. su tries to write to the audit logs to say "hey, 
              # someone tried to switch users", but if it isn't given the capability 
              # CAP_AUDIT_WRITE, that attempt is denied. This is what the 
              # (horribly cryptic) error su: system error is showing.
              - AUDIT_WRITE
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/sh
              - -c
              - nodetool drain
        env:
          - name: MAX_HEAP_SIZE
            value: 512M
          - name: HEAP_NEWSIZE
            value: 100M
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra.default.svc.cluster.local"
          - name: CASSANDRA_CLUSTER_NAME
            value: "K8Demo"
          - name: CASSANDRA_DC
            value: "DC1-K8Demo"
          - name: CASSANDRA_RACK
            value: "Rack1-K8Demo"
              #- name: CASSANDRA_SEED_PROVIDER
              #value: io.k8s.cassandra.KubernetesSeedProvider
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        #readinessProbe:
        #  exec:
        #    command:
        #    - /bin/bash
        #    - -c
        #    - /ready-probe.sh
        #  initialDelaySeconds: 15
        #  timeoutSeconds: 5
        volumeMounts:
        - name: cassandra-data
          mountPath: /var/lib/cassandra
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-disks
      resources:
        requests:
          storage: 150Mi
